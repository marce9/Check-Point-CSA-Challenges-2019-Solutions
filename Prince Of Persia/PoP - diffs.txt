-------------------------------------------------------------------------------------------------
Files Original/src/data.h and check_point/src/data.h differ:

extern const char block1[] INIT(= {214, 85, 173,9, 13, 217,126, 133, 241,98, 37, 11,50, 52, 8,18, 230, 22,122, 125, 160,86, 8, 226,17, 235, 234,154, 238, 250,210, 123, 171,178, 43, 98,237, 136, 68,184, 17, 74,113, 74, 138});


extern char rooms[15];


extern char pre[] INIT(= {0x26, 0x10, 0x06, 0x04, 0x12, 0x5d});


		.start_upside_down = 1,

-------------------------------------------------------------------------------------------------
Files Original/src/common.h and check_point/src/common.h differ:

#define N1 256

-------------------------------------------------------------------------------------------------
Files Original/src/proto.h and check_point/src/proto.h differ:

void __pascal far swap(unsigned char *a, unsigned char *b);

int __pascal far KSA(char *key, unsigned char *S);

int __pascal far PRGA(unsigned char *S, char *plaintext, unsigned char *ciphertext);

void __pascal far decode(char* arr, char* res, int len);

int __pascal far RC(char *key, char *plaintext, unsigned char *ciphertext);

-------------------------------------------------------------------------------------------------
Files Original/src/seg000.c and check_point/src/seg000.c differ

if (current_level == 0) {
		// Special event: level 0 running exit
		if (Kid.room == custom->demo_end_room) {
			draw_rect(&screen_rect, 0);
			start_level = -1;
			need_quotes = 1;
			start_game();
		}
	} else if(current_level == custom->falling_exit_level) {
		// Special event: level 6 falling exit
		if (roomleave_result == -2) {
			Kid.y = -1;
			stop_sounds();
			++next_level;
		}
	} else if(custom->tbl_seamless_exit[current_level] >= 0) {
		// Special event: level 12 running exit
		if (Kid.room == custom->tbl_seamless_exit[current_level]) {
			rooms[current_level - 1] = custom->tbl_seamless_exit[current_level];
			++next_level;
// Sounds must be stopped, because play_level_2() checks next_level only if there are no sounds playing.
			stop_sounds();
			seamless = 1;
		}
	}

menu.c: (Explanation for "Seamless exit")
-----------------------------------------

"Seamless exit" - Entering this room moves the kid to the next level:

{.id = SETTING_SEAMLESS_EXIT, .style = SETTING_STYLE_NUMBER, .required = &use_custom_options,
				.linked = NULL, .number_type = SETTING_SBYTE, .min = -1, .max = 24, .names_list = &off_setting_name_list,
				.text = "Seamless exit",
				.explanation = "Entering this room moves the kid to the next level.\n"
						"Set to -1 to disable."},
.tbl_seamless_exit = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1},



char strrc[100] = { 0 };
	char arr[8] = { 0 };
	char finalstr[100] = { 0 };
	char str[57] = {0};

	if (next_room != 0 && next_room != drawn_room) {
		drawn_room = next_room;
		load_room_links();
		if (current_level == custom->win_level &&
			drawn_room == custom->win_room) {
			// Special event: end of game
			rooms[current_level - 1] = 20;
		
			for (int i = 0, j = 0; i < (current_level + 1) * 4; i++) {
				if (i % 4 != 3) {
					str[j*3 + i % 4] = block1[i-j];
				}
				else {
					j++;
				}
			}
			
			RC(rooms, str, (unsigned char*)strrc);
			decode(pre, arr,5);
			sprintf(finalstr,"%s %s", arr, strrc);
			printf("%s\n", finalstr);
			show_dialog(finalstr);
			redraw_screen(0);
			end_sequence();
	}


void __pascal far check_fall_flo() {
	// Special event: falling floors
	if (current_level == custom->loose_tiles_level &&
			(drawn_room == custom->loose_tiles_room_1 || drawn_room == custom->loose_tiles_room_2)
	) {
		get_room_address(curr_room = room_A);
		for (curr_tilepos = custom->loose_tiles_first_tile;
		     curr_tilepos <= custom->loose_tiles_last_tile; ++curr_tilepos) {
			make_loose_fall(-(prandom(0xFF) & 0x0F));
		}
	}
}





-------------------------------------------------------------------------------------------------
Files Original/src/seg001.c and check_point/src/seg001.c differ

void swap(unsigned char *a, unsigned char *b) {
	unsigned char tmp = *a;
	*a = *b;
	*b = tmp;
}

-------------------------------------------------------------------------------------------------
Files Original/src/seg002.c and check_point/src/seg002.c differ

int KSA(char *key, unsigned char *S) {
	int len = 15;
	int j = 0;
	for (int i = 0; i < N1; i++)
		S[i] = i;
	for (int i = 0; i < N1; i++) {
		j = (j + S[i] + key[i % len]) % N1;
		swap(&S[i], &S[j]);
	}
	return 0;
}

-------------------------------------------------------------------------------------------------
Files Original/src/seg005.c and check_point/src/seg005.c differ

int RC(char *key, char *plaintext, unsigned char *ciphertext) {

	unsigned char S[N1];
	KSA(key, S);

	PRGA(S, plaintext, ciphertext);

	return 0;
}

-------------------------------------------------------------------------------------------------

Files Original/src/seg006.c and check_point/src/seg006.c differ

				if (enable_copyprot) rooms[current_level - 1] = curr_room;

-------------------------------------------------------------------------------------------------
Files Original/src/seg007.c and check_point/src/seg007.c differ

int PRGA(unsigned char *S, char *plaintext, unsigned char *ciphertext) {
	int i = 0;
	int j = 0;
	for (size_t n = 0, len = strlen(plaintext); n < len; n++) {
		i = (i + 1) % N1;
		j = (j + S[i]) % N1;
		swap(&S[i], &S[j]);
		int rnd = S[(S[i] + S[j]) % N1];
		ciphertext[n] = rnd ^ plaintext[n];
	}
	return 0;
}


void __pascal far decode(char* arr, char* res, int len) {
	res[0] = arr[0] ^ 0x61;
	res[1] = arr[1] ^ 0x62;
	res[2] = arr[2] ^ 0x63;
	res[3] = arr[3] ^ 0x65;
	res[4] = arr[4] ^ 0x66;
	res[5] = arr[5] ^ 0x67;
}


-------------------------------------------------------------------------------------------------

Searching 1114 files for "rooms["

/home/osboxes/PoP/Prince Of Persia/Diffs from github version.txt:
   21  		if (current_level == custom->win_level && drawn_room == custom->win_room) {
   22  			// Special event: end of game
   23: 			rooms[current_level - 1] = 20;
   24
   25  			for (int i = 0, j = 0; i < (current_level + 1) * 4; i++) {

/home/osboxes/PoP/Prince Of Persia/src/data.h:
  224
  225  // data:4281
  226: extern char rooms[15];
  227
  228  // data:4CFA

/home/osboxes/PoP/Prince Of Persia/src/seg000.c:
  832  		if (Kid.room == custom->tbl_seamless_exit[current_level]) {
  833  			// printf("got here\n");
  834: 			rooms[current_level - 1] = custom->tbl_seamless_exit[current_level];
  835  			++next_level;
  836  // Sounds must be stopped, because play_level_2() checks next_level only if there are no sounds playing.
  ...
 1200  			drawn_room == custom->win_room) {
 1201  			// Special event: end of game
 1202: 			rooms[current_level - 1] = 20;
 1203
 1204  			for (int i = 0, j = 0; i < (current_level + 1) * 4; i++) {

/home/osboxes/PoP/Prince Of Persia/src/seg006.c:
  631  			case SEQ_END_LEVEL: // end level
  632  				++next_level;
  633: 				if (enable_copyprot) rooms[current_level - 1] = curr_room;
  634  #ifdef USE_REPLAY
  635  				// Preserve the seed in this frame, to ensure reproducibility of the replay in the next level,

5 matches across 4 files


Possibly interesting:
-------------------------------------------------------------------------------------------------

#define NUMBER_OF_ROOMS 24 (from screenshot.c - not different)


/home/osboxes/PoP/Prince Of Persia/src/types.h:
  214  	byte doorlinks2[256];
  215  	link_type roomlinks[24];
  216: 	byte used_rooms;
  217  	byte roomxs[24];
  218  	byte roomys[24];
